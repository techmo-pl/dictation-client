// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dictation_asr.proto

#include "dictation_asr.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace google {
namespace cloud {
namespace speech {
namespace v1 {
constexpr RecognizeRequest::RecognizeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(nullptr)
  , audio_(nullptr){}
struct RecognizeRequestDefaultTypeInternal {
  constexpr RecognizeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecognizeRequestDefaultTypeInternal() {}
  union {
    RecognizeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecognizeRequestDefaultTypeInternal _RecognizeRequest_default_instance_;
constexpr StreamingRecognizeRequest::StreamingRecognizeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct StreamingRecognizeRequestDefaultTypeInternal {
  constexpr StreamingRecognizeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamingRecognizeRequestDefaultTypeInternal() {}
  union {
    StreamingRecognizeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamingRecognizeRequestDefaultTypeInternal _StreamingRecognizeRequest_default_instance_;
constexpr StreamingRecognitionConfig::StreamingRecognitionConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_(nullptr)
  , single_utterance_(false)
  , interim_results_(false){}
struct StreamingRecognitionConfigDefaultTypeInternal {
  constexpr StreamingRecognitionConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamingRecognitionConfigDefaultTypeInternal() {}
  union {
    StreamingRecognitionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamingRecognitionConfigDefaultTypeInternal _StreamingRecognitionConfig_default_instance_;
constexpr RecognitionConfig::RecognitionConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : speech_contexts_()
  , config_fields_()
  , language_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encoding_(0)

  , sample_rate_hertz_(0)
  , max_alternatives_(0)
  , profanity_filter_(false)
  , enable_word_time_offsets_(false)
  , enable_automatic_punctuation_(false)
  , use_enhanced_(false){}
struct RecognitionConfigDefaultTypeInternal {
  constexpr RecognitionConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecognitionConfigDefaultTypeInternal() {}
  union {
    RecognitionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecognitionConfigDefaultTypeInternal _RecognitionConfig_default_instance_;
constexpr SpeechContext::SpeechContext(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phrases_(){}
struct SpeechContextDefaultTypeInternal {
  constexpr SpeechContextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeechContextDefaultTypeInternal() {}
  union {
    SpeechContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeechContextDefaultTypeInternal _SpeechContext_default_instance_;
constexpr ConfigField::ConfigField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ConfigFieldDefaultTypeInternal {
  constexpr ConfigFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigFieldDefaultTypeInternal() {}
  union {
    ConfigField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigFieldDefaultTypeInternal _ConfigField_default_instance_;
constexpr RecognitionAudio::RecognitionAudio(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct RecognitionAudioDefaultTypeInternal {
  constexpr RecognitionAudioDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecognitionAudioDefaultTypeInternal() {}
  union {
    RecognitionAudio _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecognitionAudioDefaultTypeInternal _RecognitionAudio_default_instance_;
constexpr RecognizeResponse::RecognizeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct RecognizeResponseDefaultTypeInternal {
  constexpr RecognizeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecognizeResponseDefaultTypeInternal() {}
  union {
    RecognizeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecognizeResponseDefaultTypeInternal _RecognizeResponse_default_instance_;
constexpr StreamingRecognizeResponse::StreamingRecognizeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , error_(nullptr)
  , speech_event_type_(0)
{}
struct StreamingRecognizeResponseDefaultTypeInternal {
  constexpr StreamingRecognizeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamingRecognizeResponseDefaultTypeInternal() {}
  union {
    StreamingRecognizeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamingRecognizeResponseDefaultTypeInternal _StreamingRecognizeResponse_default_instance_;
constexpr StreamingRecognitionResult::StreamingRecognitionResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : alternatives_()
  , lattice_()
  , is_final_(false)
  , stability_(0)
  , result_finalization_cause_(0)
{}
struct StreamingRecognitionResultDefaultTypeInternal {
  constexpr StreamingRecognitionResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamingRecognitionResultDefaultTypeInternal() {}
  union {
    StreamingRecognitionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamingRecognitionResultDefaultTypeInternal _StreamingRecognitionResult_default_instance_;
constexpr SpeechRecognitionResult::SpeechRecognitionResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : alternatives_()
  , lattice_(){}
struct SpeechRecognitionResultDefaultTypeInternal {
  constexpr SpeechRecognitionResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeechRecognitionResultDefaultTypeInternal() {}
  union {
    SpeechRecognitionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeechRecognitionResultDefaultTypeInternal _SpeechRecognitionResult_default_instance_;
constexpr SpeechRecognitionAlternative::SpeechRecognitionAlternative(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : words_()
  , transcript_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , confidence_(0){}
struct SpeechRecognitionAlternativeDefaultTypeInternal {
  constexpr SpeechRecognitionAlternativeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeechRecognitionAlternativeDefaultTypeInternal() {}
  union {
    SpeechRecognitionAlternative _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeechRecognitionAlternativeDefaultTypeInternal _SpeechRecognitionAlternative_default_instance_;
constexpr WordInfo::WordInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : word_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_time_(nullptr)
  , end_time_(nullptr){}
struct WordInfoDefaultTypeInternal {
  constexpr WordInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WordInfoDefaultTypeInternal() {}
  union {
    WordInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WordInfoDefaultTypeInternal _WordInfo_default_instance_;
constexpr RecognitionLattice::RecognitionLattice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : final_nodes_()
  , _final_nodes_cached_byte_size_()
  , edges_(){}
struct RecognitionLatticeDefaultTypeInternal {
  constexpr RecognitionLatticeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecognitionLatticeDefaultTypeInternal() {}
  union {
    RecognitionLattice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecognitionLatticeDefaultTypeInternal _RecognitionLattice_default_instance_;
constexpr LatticeEdge::LatticeEdge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_node_(0)
  , end_node_(0)
  , language_cost_(0)
  , acoustic_cost_(0)
  , duration_(0){}
struct LatticeEdgeDefaultTypeInternal {
  constexpr LatticeEdgeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LatticeEdgeDefaultTypeInternal() {}
  union {
    LatticeEdge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LatticeEdgeDefaultTypeInternal _LatticeEdge_default_instance_;
}  // namespace v1
}  // namespace speech
}  // namespace cloud
}  // namespace google
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dictation_5fasr_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dictation_5fasr_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dictation_5fasr_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dictation_5fasr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeRequest, config_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeRequest, audio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeRequest, streaming_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionConfig, config_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionConfig, single_utterance_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionConfig, interim_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, encoding_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, sample_rate_hertz_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, language_code_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, max_alternatives_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, profanity_filter_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, speech_contexts_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, enable_word_time_offsets_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, enable_automatic_punctuation_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, config_fields_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, model_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionConfig, use_enhanced_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechContext, phrases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::ConfigField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::ConfigField, key_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::ConfigField, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionAudio, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionAudio, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionAudio, audio_source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognizeResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeResponse, error_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeResponse, results_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognizeResponse, speech_event_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionResult, alternatives_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionResult, is_final_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionResult, stability_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionResult, result_finalization_cause_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::StreamingRecognitionResult, lattice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionResult, alternatives_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionResult, lattice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionAlternative, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionAlternative, transcript_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionAlternative, confidence_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::SpeechRecognitionAlternative, words_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::WordInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::WordInfo, start_time_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::WordInfo, end_time_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::WordInfo, word_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionLattice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionLattice, final_nodes_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::RecognitionLattice, edges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LatticeEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LatticeEdge, start_node_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LatticeEdge, end_node_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LatticeEdge, symbol_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LatticeEdge, language_cost_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LatticeEdge, acoustic_cost_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::speech::v1::LatticeEdge, duration_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::cloud::speech::v1::RecognizeRequest)},
  { 7, -1, sizeof(::google::cloud::speech::v1::StreamingRecognizeRequest)},
  { 15, -1, sizeof(::google::cloud::speech::v1::StreamingRecognitionConfig)},
  { 23, -1, sizeof(::google::cloud::speech::v1::RecognitionConfig)},
  { 39, -1, sizeof(::google::cloud::speech::v1::SpeechContext)},
  { 45, -1, sizeof(::google::cloud::speech::v1::ConfigField)},
  { 52, -1, sizeof(::google::cloud::speech::v1::RecognitionAudio)},
  { 60, -1, sizeof(::google::cloud::speech::v1::RecognizeResponse)},
  { 66, -1, sizeof(::google::cloud::speech::v1::StreamingRecognizeResponse)},
  { 74, -1, sizeof(::google::cloud::speech::v1::StreamingRecognitionResult)},
  { 84, -1, sizeof(::google::cloud::speech::v1::SpeechRecognitionResult)},
  { 91, -1, sizeof(::google::cloud::speech::v1::SpeechRecognitionAlternative)},
  { 99, -1, sizeof(::google::cloud::speech::v1::WordInfo)},
  { 107, -1, sizeof(::google::cloud::speech::v1::RecognitionLattice)},
  { 114, -1, sizeof(::google::cloud::speech::v1::LatticeEdge)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_RecognizeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_StreamingRecognizeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_StreamingRecognitionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_RecognitionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_SpeechContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_ConfigField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_RecognitionAudio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_RecognizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_StreamingRecognizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_StreamingRecognitionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_SpeechRecognitionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_SpeechRecognitionAlternative_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_WordInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_RecognitionLattice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::speech::v1::_LatticeEdge_default_instance_),
};

const char descriptor_table_protodef_dictation_5fasr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023dictation_asr.proto\022\026google.cloud.spee"
  "ch.v1\032\034google/api/annotations.proto\032\036goo"
  "gle/protobuf/duration.proto\032\027google/rpc/"
  "status.proto\"\206\001\n\020RecognizeRequest\0229\n\006con"
  "fig\030\001 \001(\0132).google.cloud.speech.v1.Recog"
  "nitionConfig\0227\n\005audio\030\002 \001(\0132(.google.clo"
  "ud.speech.v1.RecognitionAudio\"\231\001\n\031Stream"
  "ingRecognizeRequest\022N\n\020streaming_config\030"
  "\001 \001(\01322.google.cloud.speech.v1.Streaming"
  "RecognitionConfigH\000\022\027\n\raudio_content\030\002 \001"
  "(\014H\000B\023\n\021streaming_request\"\212\001\n\032StreamingR"
  "ecognitionConfig\0229\n\006config\030\001 \001(\0132).googl"
  "e.cloud.speech.v1.RecognitionConfig\022\030\n\020s"
  "ingle_utterance\030\002 \001(\010\022\027\n\017interim_results"
  "\030\003 \001(\010\"\304\004\n\021RecognitionConfig\022I\n\010encoding"
  "\030\001 \001(\01627.google.cloud.speech.v1.Recognit"
  "ionConfig.AudioEncoding\022\031\n\021sample_rate_h"
  "ertz\030\002 \001(\005\022\025\n\rlanguage_code\030\003 \001(\t\022\030\n\020max"
  "_alternatives\030\004 \001(\005\022\030\n\020profanity_filter\030"
  "\005 \001(\010\022>\n\017speech_contexts\030\006 \003(\0132%.google."
  "cloud.speech.v1.SpeechContext\022 \n\030enable_"
  "word_time_offsets\030\010 \001(\010\022$\n\034enable_automa"
  "tic_punctuation\030\013 \001(\010\022:\n\rconfig_fields\030\014"
  " \003(\0132#.google.cloud.speech.v1.ConfigFiel"
  "d\022\r\n\005model\030\r \001(\t\022\024\n\014use_enhanced\030\016 \001(\010\"\224"
  "\001\n\rAudioEncoding\022\030\n\024ENCODING_UNSPECIFIED"
  "\020\000\022\014\n\010LINEAR16\020\001\022\010\n\004FLAC\020\002\022\t\n\005MULAW\020\003\022\007\n"
  "\003AMR\020\004\022\n\n\006AMR_WB\020\005\022\014\n\010OGG_OPUS\020\006\022\032\n\026SPEE"
  "X_WITH_HEADER_BYTE\020\007\022\007\n\003MP3\020\010\" \n\rSpeechC"
  "ontext\022\017\n\007phrases\030\001 \003(\t\")\n\013ConfigField\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"D\n\020Recognitio"
  "nAudio\022\021\n\007content\030\001 \001(\014H\000\022\r\n\003uri\030\002 \001(\tH\000"
  "B\016\n\014audio_source\"U\n\021RecognizeResponse\022@\n"
  "\007results\030\002 \003(\0132/.google.cloud.speech.v1."
  "SpeechRecognitionResult\"\261\002\n\032StreamingRec"
  "ognizeResponse\022!\n\005error\030\001 \001(\0132\022.google.r"
  "pc.Status\022C\n\007results\030\002 \003(\01322.google.clou"
  "d.speech.v1.StreamingRecognitionResult\022]"
  "\n\021speech_event_type\030\004 \001(\0162B.google.cloud"
  ".speech.v1.StreamingRecognizeResponse.Sp"
  "eechEventType\"L\n\017SpeechEventType\022\034\n\030SPEE"
  "CH_EVENT_UNSPECIFIED\020\000\022\033\n\027END_OF_SINGLE_"
  "UTTERANCE\020\001\"\341\003\n\032StreamingRecognitionResu"
  "lt\022J\n\014alternatives\030\001 \003(\01324.google.cloud."
  "speech.v1.SpeechRecognitionAlternative\022\020"
  "\n\010is_final\030\002 \001(\010\022\021\n\tstability\030\003 \001(\002\022m\n\031r"
  "esult_finalization_cause\030\004 \001(\0162J.google."
  "cloud.speech.v1.StreamingRecognitionResu"
  "lt.ResultFinalizationCause\022;\n\007lattice\030\005 "
  "\003(\0132*.google.cloud.speech.v1.Recognition"
  "Lattice\"\245\001\n\027ResultFinalizationCause\022)\n%R"
  "ESULT_FINALIZATION_CAUSE_UNSPECIFIED\020\000\022\013"
  "\n\007SUCCESS\020\001\022\024\n\020NO_INPUT_TIMEOUT\020\002\022\023\n\017SUC"
  "CESS_MAXTIME\020\003\022\021\n\rPARTIAL_MATCH\020\004\022\024\n\020NO_"
  "MATCH_MAXTIME\020\005\"\242\001\n\027SpeechRecognitionRes"
  "ult\022J\n\014alternatives\030\001 \003(\01324.google.cloud"
  ".speech.v1.SpeechRecognitionAlternative\022"
  ";\n\007lattice\030\005 \003(\0132*.google.cloud.speech.v"
  "1.RecognitionLattice\"w\n\034SpeechRecognitio"
  "nAlternative\022\022\n\ntranscript\030\001 \001(\t\022\022\n\nconf"
  "idence\030\002 \001(\002\022/\n\005words\030\003 \003(\0132 .google.clo"
  "ud.speech.v1.WordInfo\"t\n\010WordInfo\022-\n\nsta"
  "rt_time\030\001 \001(\0132\031.google.protobuf.Duration"
  "\022+\n\010end_time\030\002 \001(\0132\031.google.protobuf.Dur"
  "ation\022\014\n\004word\030\003 \001(\t\"]\n\022RecognitionLattic"
  "e\022\023\n\013final_nodes\030\001 \003(\005\0222\n\005edges\030\002 \003(\0132#."
  "google.cloud.speech.v1.LatticeEdge\"\203\001\n\013L"
  "atticeEdge\022\022\n\nstart_node\030\001 \001(\005\022\020\n\010end_no"
  "de\030\002 \001(\005\022\016\n\006symbol\030\003 \001(\t\022\025\n\rlanguage_cos"
  "t\030\004 \001(\002\022\025\n\racoustic_cost\030\005 \001(\002\022\020\n\010durati"
  "on\030\006 \001(\0052\220\002\n\006Speech\022\201\001\n\tRecognize\022(.goog"
  "le.cloud.speech.v1.RecognizeRequest\032).go"
  "ogle.cloud.speech.v1.RecognizeResponse\"\037"
  "\202\323\344\223\002\031\"\024/v1/speech:recognize:\001*\022\201\001\n\022Stre"
  "amingRecognize\0221.google.cloud.speech.v1."
  "StreamingRecognizeRequest\0322.google.cloud"
  ".speech.v1.StreamingRecognizeResponse\"\000("
  "\0010\001Bl\n\032com.google.cloud.speech.v1B\013Speec"
  "hProtoP\001Z<google.golang.org/genproto/goo"
  "gleapis/cloud/speech/v1;speech\370\001\001b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dictation_5fasr_2eproto_deps[3] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dictation_5fasr_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dictation_5fasr_2eproto = {
  false, false, 3201, descriptor_table_protodef_dictation_5fasr_2eproto, "dictation_asr.proto", 
  &descriptor_table_dictation_5fasr_2eproto_once, descriptor_table_dictation_5fasr_2eproto_deps, 3, 15,
  schemas, file_default_instances, TableStruct_dictation_5fasr_2eproto::offsets,
  file_level_metadata_dictation_5fasr_2eproto, file_level_enum_descriptors_dictation_5fasr_2eproto, file_level_service_descriptors_dictation_5fasr_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_dictation_5fasr_2eproto_getter() {
  return &descriptor_table_dictation_5fasr_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dictation_5fasr_2eproto(&descriptor_table_dictation_5fasr_2eproto);
namespace google {
namespace cloud {
namespace speech {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecognitionConfig_AudioEncoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dictation_5fasr_2eproto);
  return file_level_enum_descriptors_dictation_5fasr_2eproto[0];
}
bool RecognitionConfig_AudioEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::ENCODING_UNSPECIFIED;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::LINEAR16;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::FLAC;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::MULAW;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::AMR;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::AMR_WB;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::OGG_OPUS;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::SPEEX_WITH_HEADER_BYTE;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::MP3;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::AudioEncoding_MIN;
constexpr RecognitionConfig_AudioEncoding RecognitionConfig::AudioEncoding_MAX;
constexpr int RecognitionConfig::AudioEncoding_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamingRecognizeResponse_SpeechEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dictation_5fasr_2eproto);
  return file_level_enum_descriptors_dictation_5fasr_2eproto[1];
}
bool StreamingRecognizeResponse_SpeechEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SPEECH_EVENT_UNSPECIFIED;
constexpr StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::END_OF_SINGLE_UTTERANCE;
constexpr StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SpeechEventType_MIN;
constexpr StreamingRecognizeResponse_SpeechEventType StreamingRecognizeResponse::SpeechEventType_MAX;
constexpr int StreamingRecognizeResponse::SpeechEventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamingRecognitionResult_ResultFinalizationCause_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dictation_5fasr_2eproto);
  return file_level_enum_descriptors_dictation_5fasr_2eproto[2];
}
bool StreamingRecognitionResult_ResultFinalizationCause_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StreamingRecognitionResult_ResultFinalizationCause StreamingRecognitionResult::RESULT_FINALIZATION_CAUSE_UNSPECIFIED;
constexpr StreamingRecognitionResult_ResultFinalizationCause StreamingRecognitionResult::SUCCESS;
constexpr StreamingRecognitionResult_ResultFinalizationCause StreamingRecognitionResult::NO_INPUT_TIMEOUT;
constexpr StreamingRecognitionResult_ResultFinalizationCause StreamingRecognitionResult::SUCCESS_MAXTIME;
constexpr StreamingRecognitionResult_ResultFinalizationCause StreamingRecognitionResult::PARTIAL_MATCH;
constexpr StreamingRecognitionResult_ResultFinalizationCause StreamingRecognitionResult::NO_MATCH_MAXTIME;
constexpr StreamingRecognitionResult_ResultFinalizationCause StreamingRecognitionResult::ResultFinalizationCause_MIN;
constexpr StreamingRecognitionResult_ResultFinalizationCause StreamingRecognitionResult::ResultFinalizationCause_MAX;
constexpr int StreamingRecognitionResult::ResultFinalizationCause_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class RecognizeRequest::_Internal {
 public:
  static const ::google::cloud::speech::v1::RecognitionConfig& config(const RecognizeRequest* msg);
  static const ::google::cloud::speech::v1::RecognitionAudio& audio(const RecognizeRequest* msg);
};

const ::google::cloud::speech::v1::RecognitionConfig&
RecognizeRequest::_Internal::config(const RecognizeRequest* msg) {
  return *msg->config_;
}
const ::google::cloud::speech::v1::RecognitionAudio&
RecognizeRequest::_Internal::audio(const RecognizeRequest* msg) {
  return *msg->audio_;
}
RecognizeRequest::RecognizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognizeRequest)
}
RecognizeRequest::RecognizeRequest(const RecognizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::google::cloud::speech::v1::RecognitionConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_audio()) {
    audio_ = new ::google::cloud::speech::v1::RecognitionAudio(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognizeRequest)
}

void RecognizeRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&audio_) -
    reinterpret_cast<char*>(&config_)) + sizeof(audio_));
}

RecognizeRequest::~RecognizeRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognizeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecognizeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete audio_;
}

void RecognizeRequest::ArenaDtor(void* object) {
  RecognizeRequest* _this = reinterpret_cast< RecognizeRequest* >(object);
  (void)_this;
}
void RecognizeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecognizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArena() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecognizeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.cloud.speech.v1.RecognitionConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.RecognitionAudio audio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecognizeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // .google.cloud.speech.v1.RecognitionAudio audio = 2;
  if (this->has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::audio(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognizeRequest)
  return target;
}

size_t RecognizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognizeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .google.cloud.speech.v1.RecognitionAudio audio = 2;
  if (this->has_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognizeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.RecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecognizeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.RecognizeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.RecognizeRequest)
    MergeFrom(*source);
  }
}

void RecognizeRequest::MergeFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::google::cloud::speech::v1::RecognitionConfig::MergeFrom(from._internal_config());
  }
  if (from.has_audio()) {
    _internal_mutable_audio()->::google::cloud::speech::v1::RecognitionAudio::MergeFrom(from._internal_audio());
  }
}

void RecognizeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.RecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeRequest::CopyFrom(const RecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeRequest::IsInitialized() const {
  return true;
}

void RecognizeRequest::InternalSwap(RecognizeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecognizeRequest, audio_)
      + sizeof(RecognizeRequest::audio_)
      - PROTOBUF_FIELD_OFFSET(RecognizeRequest, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognizeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dictation_5fasr_2eproto_getter, &descriptor_table_dictation_5fasr_2eproto_once,
      file_level_metadata_dictation_5fasr_2eproto[0]);
}

// ===================================================================

class StreamingRecognizeRequest::_Internal {
 public:
  static const ::google::cloud::speech::v1::StreamingRecognitionConfig& streaming_config(const StreamingRecognizeRequest* msg);
};

const ::google::cloud::speech::v1::StreamingRecognitionConfig&
StreamingRecognizeRequest::_Internal::streaming_config(const StreamingRecognizeRequest* msg) {
  return *msg->streaming_request_.streaming_config_;
}
void StreamingRecognizeRequest::set_allocated_streaming_config(::google::cloud::speech::v1::StreamingRecognitionConfig* streaming_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_streaming_request();
  if (streaming_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(streaming_config);
    if (message_arena != submessage_arena) {
      streaming_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streaming_config, submessage_arena);
    }
    set_has_streaming_config();
    streaming_request_.streaming_config_ = streaming_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.cloud.speech.v1.StreamingRecognizeRequest.streaming_config)
}
StreamingRecognizeRequest::StreamingRecognizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.StreamingRecognizeRequest)
}
StreamingRecognizeRequest::StreamingRecognizeRequest(const StreamingRecognizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_streaming_request();
  switch (from.streaming_request_case()) {
    case kStreamingConfig: {
      _internal_mutable_streaming_config()->::google::cloud::speech::v1::StreamingRecognitionConfig::MergeFrom(from._internal_streaming_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audio_content(from._internal_audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.StreamingRecognizeRequest)
}

void StreamingRecognizeRequest::SharedCtor() {
clear_has_streaming_request();
}

StreamingRecognizeRequest::~StreamingRecognizeRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.StreamingRecognizeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamingRecognizeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_streaming_request()) {
    clear_streaming_request();
  }
}

void StreamingRecognizeRequest::ArenaDtor(void* object) {
  StreamingRecognizeRequest* _this = reinterpret_cast< StreamingRecognizeRequest* >(object);
  (void)_this;
}
void StreamingRecognizeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingRecognizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamingRecognizeRequest::clear_streaming_request() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  switch (streaming_request_case()) {
    case kStreamingConfig: {
      if (GetArena() == nullptr) {
        delete streaming_request_.streaming_config_;
      }
      break;
    }
    case kAudioContent: {
      streaming_request_.audio_content_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}


void StreamingRecognizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streaming_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingRecognizeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_streaming_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes audio_content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_audio_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingRecognizeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
  if (_internal_has_streaming_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::streaming_config(this), target, stream);
  }

  // bytes audio_content = 2;
  if (_internal_has_audio_content()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_audio_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.StreamingRecognizeRequest)
  return target;
}

size_t StreamingRecognizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streaming_request_case()) {
    // .google.cloud.speech.v1.StreamingRecognitionConfig streaming_config = 1;
    case kStreamingConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_request_.streaming_config_);
      break;
    }
    // bytes audio_content = 2;
    case kAudioContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingRecognizeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingRecognizeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingRecognizeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.StreamingRecognizeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.StreamingRecognizeRequest)
    MergeFrom(*source);
  }
}

void StreamingRecognizeRequest::MergeFrom(const StreamingRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streaming_request_case()) {
    case kStreamingConfig: {
      _internal_mutable_streaming_config()->::google::cloud::speech::v1::StreamingRecognitionConfig::MergeFrom(from._internal_streaming_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audio_content(from._internal_audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
}

void StreamingRecognizeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingRecognizeRequest::CopyFrom(const StreamingRecognizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.StreamingRecognizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognizeRequest::IsInitialized() const {
  return true;
}

void StreamingRecognizeRequest::InternalSwap(StreamingRecognizeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(streaming_request_, other->streaming_request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingRecognizeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dictation_5fasr_2eproto_getter, &descriptor_table_dictation_5fasr_2eproto_once,
      file_level_metadata_dictation_5fasr_2eproto[1]);
}

// ===================================================================

class StreamingRecognitionConfig::_Internal {
 public:
  static const ::google::cloud::speech::v1::RecognitionConfig& config(const StreamingRecognitionConfig* msg);
};

const ::google::cloud::speech::v1::RecognitionConfig&
StreamingRecognitionConfig::_Internal::config(const StreamingRecognitionConfig* msg) {
  return *msg->config_;
}
StreamingRecognitionConfig::StreamingRecognitionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.StreamingRecognitionConfig)
}
StreamingRecognitionConfig::StreamingRecognitionConfig(const StreamingRecognitionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::google::cloud::speech::v1::RecognitionConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  ::memcpy(&single_utterance_, &from.single_utterance_,
    static_cast<size_t>(reinterpret_cast<char*>(&interim_results_) -
    reinterpret_cast<char*>(&single_utterance_)) + sizeof(interim_results_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.StreamingRecognitionConfig)
}

void StreamingRecognitionConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&interim_results_) -
    reinterpret_cast<char*>(&config_)) + sizeof(interim_results_));
}

StreamingRecognitionConfig::~StreamingRecognitionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.StreamingRecognitionConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamingRecognitionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete config_;
}

void StreamingRecognitionConfig::ArenaDtor(void* object) {
  StreamingRecognitionConfig* _this = reinterpret_cast< StreamingRecognitionConfig* >(object);
  (void)_this;
}
void StreamingRecognitionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingRecognitionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamingRecognitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  ::memset(&single_utterance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interim_results_) -
      reinterpret_cast<char*>(&single_utterance_)) + sizeof(interim_results_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingRecognitionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.cloud.speech.v1.RecognitionConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool single_utterance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          single_utterance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool interim_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          interim_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingRecognitionConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::config(this), target, stream);
  }

  // bool single_utterance = 2;
  if (this->single_utterance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_single_utterance(), target);
  }

  // bool interim_results = 3;
  if (this->interim_results() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_interim_results(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.StreamingRecognitionConfig)
  return target;
}

size_t StreamingRecognitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // bool single_utterance = 2;
  if (this->single_utterance() != 0) {
    total_size += 1 + 1;
  }

  // bool interim_results = 3;
  if (this->interim_results() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingRecognitionConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingRecognitionConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingRecognitionConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.StreamingRecognitionConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.StreamingRecognitionConfig)
    MergeFrom(*source);
  }
}

void StreamingRecognitionConfig::MergeFrom(const StreamingRecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    _internal_mutable_config()->::google::cloud::speech::v1::RecognitionConfig::MergeFrom(from._internal_config());
  }
  if (from.single_utterance() != 0) {
    _internal_set_single_utterance(from._internal_single_utterance());
  }
  if (from.interim_results() != 0) {
    _internal_set_interim_results(from._internal_interim_results());
  }
}

void StreamingRecognitionConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingRecognitionConfig::CopyFrom(const StreamingRecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.StreamingRecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognitionConfig::IsInitialized() const {
  return true;
}

void StreamingRecognitionConfig::InternalSwap(StreamingRecognitionConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamingRecognitionConfig, interim_results_)
      + sizeof(StreamingRecognitionConfig::interim_results_)
      - PROTOBUF_FIELD_OFFSET(StreamingRecognitionConfig, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingRecognitionConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dictation_5fasr_2eproto_getter, &descriptor_table_dictation_5fasr_2eproto_once,
      file_level_metadata_dictation_5fasr_2eproto[2]);
}

// ===================================================================

class RecognitionConfig::_Internal {
 public:
};

RecognitionConfig::RecognitionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  speech_contexts_(arena),
  config_fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognitionConfig)
}
RecognitionConfig::RecognitionConfig(const RecognitionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      speech_contexts_(from.speech_contexts_),
      config_fields_(from.config_fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language_code().empty()) {
    language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language_code(), 
      GetArena());
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model().empty()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArena());
  }
  ::memcpy(&encoding_, &from.encoding_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_enhanced_) -
    reinterpret_cast<char*>(&encoding_)) + sizeof(use_enhanced_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognitionConfig)
}

void RecognitionConfig::SharedCtor() {
language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&encoding_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_enhanced_) -
    reinterpret_cast<char*>(&encoding_)) + sizeof(use_enhanced_));
}

RecognitionConfig::~RecognitionConfig() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognitionConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecognitionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecognitionConfig::ArenaDtor(void* object) {
  RecognitionConfig* _this = reinterpret_cast< RecognitionConfig* >(object);
  (void)_this;
}
void RecognitionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecognitionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecognitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speech_contexts_.Clear();
  config_fields_.Clear();
  language_code_.ClearToEmpty();
  model_.ClearToEmpty();
  ::memset(&encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_enhanced_) -
      reinterpret_cast<char*>(&encoding_)) + sizeof(use_enhanced_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecognitionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encoding(static_cast<::google::cloud::speech::v1::RecognitionConfig_AudioEncoding>(val));
        } else goto handle_unusual;
        continue;
      // int32 sample_rate_hertz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sample_rate_hertz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.RecognitionConfig.language_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_alternatives = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_alternatives_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool profanity_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          profanity_filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speech_contexts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool enable_word_time_offsets = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          enable_word_time_offsets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_automatic_punctuation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          enable_automatic_punctuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.cloud.speech.v1.ConfigField config_fields = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_config_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // string model = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.RecognitionConfig.model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_enhanced = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          use_enhanced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecognitionConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognitionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
  if (this->encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_encoding(), target);
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sample_rate_hertz(), target);
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionConfig.language_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_code(), target);
  }

  // int32 max_alternatives = 4;
  if (this->max_alternatives() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_alternatives(), target);
  }

  // bool profanity_filter = 5;
  if (this->profanity_filter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_profanity_filter(), target);
  }

  // repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_speech_contexts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_speech_contexts(i), target, stream);
  }

  // bool enable_word_time_offsets = 8;
  if (this->enable_word_time_offsets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_enable_word_time_offsets(), target);
  }

  // bool enable_automatic_punctuation = 11;
  if (this->enable_automatic_punctuation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_enable_automatic_punctuation(), target);
  }

  // repeated .google.cloud.speech.v1.ConfigField config_fields = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_config_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_config_fields(i), target, stream);
  }

  // string model = 13;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionConfig.model");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_model(), target);
  }

  // bool use_enhanced = 14;
  if (this->use_enhanced() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_use_enhanced(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognitionConfig)
  return target;
}

size_t RecognitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognitionConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechContext speech_contexts = 6;
  total_size += 1UL * this->_internal_speech_contexts_size();
  for (const auto& msg : this->speech_contexts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.cloud.speech.v1.ConfigField config_fields = 12;
  total_size += 1UL * this->_internal_config_fields_size();
  for (const auto& msg : this->config_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_code());
  }

  // string model = 13;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // .google.cloud.speech.v1.RecognitionConfig.AudioEncoding encoding = 1;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encoding());
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sample_rate_hertz());
  }

  // int32 max_alternatives = 4;
  if (this->max_alternatives() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_alternatives());
  }

  // bool profanity_filter = 5;
  if (this->profanity_filter() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_word_time_offsets = 8;
  if (this->enable_word_time_offsets() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_automatic_punctuation = 11;
  if (this->enable_automatic_punctuation() != 0) {
    total_size += 1 + 1;
  }

  // bool use_enhanced = 14;
  if (this->use_enhanced() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognitionConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.RecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognitionConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecognitionConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.RecognitionConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.RecognitionConfig)
    MergeFrom(*source);
  }
}

void RecognitionConfig::MergeFrom(const RecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  speech_contexts_.MergeFrom(from.speech_contexts_);
  config_fields_.MergeFrom(from.config_fields_);
  if (from.language_code().size() > 0) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (from.model().size() > 0) {
    _internal_set_model(from._internal_model());
  }
  if (from.encoding() != 0) {
    _internal_set_encoding(from._internal_encoding());
  }
  if (from.sample_rate_hertz() != 0) {
    _internal_set_sample_rate_hertz(from._internal_sample_rate_hertz());
  }
  if (from.max_alternatives() != 0) {
    _internal_set_max_alternatives(from._internal_max_alternatives());
  }
  if (from.profanity_filter() != 0) {
    _internal_set_profanity_filter(from._internal_profanity_filter());
  }
  if (from.enable_word_time_offsets() != 0) {
    _internal_set_enable_word_time_offsets(from._internal_enable_word_time_offsets());
  }
  if (from.enable_automatic_punctuation() != 0) {
    _internal_set_enable_automatic_punctuation(from._internal_enable_automatic_punctuation());
  }
  if (from.use_enhanced() != 0) {
    _internal_set_use_enhanced(from._internal_use_enhanced());
  }
}

void RecognitionConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.RecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognitionConfig::CopyFrom(const RecognitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognitionConfig::IsInitialized() const {
  return true;
}

void RecognitionConfig::InternalSwap(RecognitionConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  speech_contexts_.InternalSwap(&other->speech_contexts_);
  config_fields_.InternalSwap(&other->config_fields_);
  language_code_.Swap(&other->language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecognitionConfig, use_enhanced_)
      + sizeof(RecognitionConfig::use_enhanced_)
      - PROTOBUF_FIELD_OFFSET(RecognitionConfig, encoding_)>(
          reinterpret_cast<char*>(&encoding_),
          reinterpret_cast<char*>(&other->encoding_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognitionConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dictation_5fasr_2eproto_getter, &descriptor_table_dictation_5fasr_2eproto_once,
      file_level_metadata_dictation_5fasr_2eproto[3]);
}

// ===================================================================

class SpeechContext::_Internal {
 public:
};

SpeechContext::SpeechContext(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  phrases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.SpeechContext)
}
SpeechContext::SpeechContext(const SpeechContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      phrases_(from.phrases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.SpeechContext)
}

void SpeechContext::SharedCtor() {
}

SpeechContext::~SpeechContext() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.SpeechContext)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeechContext::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpeechContext::ArenaDtor(void* object) {
  SpeechContext* _this = reinterpret_cast< SpeechContext* >(object);
  (void)_this;
}
void SpeechContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeechContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeechContext::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.SpeechContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phrases_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeechContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string phrases = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_phrases();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.SpeechContext.phrases"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeechContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.SpeechContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string phrases = 1;
  for (int i = 0, n = this->_internal_phrases_size(); i < n; i++) {
    const auto& s = this->_internal_phrases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.SpeechContext.phrases");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.SpeechContext)
  return target;
}

size_t SpeechContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.SpeechContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string phrases = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(phrases_.size());
  for (int i = 0, n = phrases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      phrases_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.SpeechContext)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeechContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.SpeechContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.SpeechContext)
    MergeFrom(*source);
  }
}

void SpeechContext::MergeFrom(const SpeechContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.SpeechContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phrases_.MergeFrom(from.phrases_);
}

void SpeechContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.SpeechContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechContext::CopyFrom(const SpeechContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.SpeechContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechContext::IsInitialized() const {
  return true;
}

void SpeechContext::InternalSwap(SpeechContext* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  phrases_.InternalSwap(&other->phrases_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeechContext::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dictation_5fasr_2eproto_getter, &descriptor_table_dictation_5fasr_2eproto_once,
      file_level_metadata_dictation_5fasr_2eproto[4]);
}

// ===================================================================

class ConfigField::_Internal {
 public:
};

ConfigField::ConfigField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.ConfigField)
}
ConfigField::ConfigField(const ConfigField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.ConfigField)
}

void ConfigField::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConfigField::~ConfigField() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.ConfigField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigField::ArenaDtor(void* object) {
  ConfigField* _this = reinterpret_cast< ConfigField* >(object);
  (void)_this;
}
void ConfigField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigField::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.ConfigField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.ConfigField.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.ConfigField.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.ConfigField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.ConfigField.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.ConfigField.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.ConfigField)
  return target;
}

size_t ConfigField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.ConfigField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.ConfigField)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.ConfigField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.ConfigField)
    MergeFrom(*source);
  }
}

void ConfigField::MergeFrom(const ConfigField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.ConfigField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void ConfigField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.ConfigField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigField::CopyFrom(const ConfigField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.ConfigField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigField::IsInitialized() const {
  return true;
}

void ConfigField::InternalSwap(ConfigField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigField::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dictation_5fasr_2eproto_getter, &descriptor_table_dictation_5fasr_2eproto_once,
      file_level_metadata_dictation_5fasr_2eproto[5]);
}

// ===================================================================

class RecognitionAudio::_Internal {
 public:
};

RecognitionAudio::RecognitionAudio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognitionAudio)
}
RecognitionAudio::RecognitionAudio(const RecognitionAudio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_audio_source();
  switch (from.audio_source_case()) {
    case kContent: {
      _internal_set_content(from._internal_content());
      break;
    }
    case kUri: {
      _internal_set_uri(from._internal_uri());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognitionAudio)
}

void RecognitionAudio::SharedCtor() {
clear_has_audio_source();
}

RecognitionAudio::~RecognitionAudio() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognitionAudio)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecognitionAudio::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_audio_source()) {
    clear_audio_source();
  }
}

void RecognitionAudio::ArenaDtor(void* object) {
  RecognitionAudio* _this = reinterpret_cast< RecognitionAudio* >(object);
  (void)_this;
}
void RecognitionAudio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecognitionAudio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecognitionAudio::clear_audio_source() {
// @@protoc_insertion_point(one_of_clear_start:google.cloud.speech.v1.RecognitionAudio)
  switch (audio_source_case()) {
    case kContent: {
      audio_source_.content_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kUri: {
      audio_source_.uri_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AUDIO_SOURCE_NOT_SET;
}


void RecognitionAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognitionAudio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_audio_source();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecognitionAudio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.RecognitionAudio.uri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecognitionAudio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognitionAudio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (_internal_has_content()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_content(), target);
  }

  // string uri = 2;
  if (_internal_has_uri()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.RecognitionAudio.uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognitionAudio)
  return target;
}

size_t RecognitionAudio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognitionAudio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (audio_source_case()) {
    // bytes content = 1;
    case kContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_content());
      break;
    }
    // string uri = 2;
    case kUri: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uri());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognitionAudio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.RecognitionAudio)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognitionAudio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecognitionAudio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.RecognitionAudio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.RecognitionAudio)
    MergeFrom(*source);
  }
}

void RecognitionAudio::MergeFrom(const RecognitionAudio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognitionAudio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.audio_source_case()) {
    case kContent: {
      _internal_set_content(from._internal_content());
      break;
    }
    case kUri: {
      _internal_set_uri(from._internal_uri());
      break;
    }
    case AUDIO_SOURCE_NOT_SET: {
      break;
    }
  }
}

void RecognitionAudio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.RecognitionAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognitionAudio::CopyFrom(const RecognitionAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognitionAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognitionAudio::IsInitialized() const {
  return true;
}

void RecognitionAudio::InternalSwap(RecognitionAudio* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(audio_source_, other->audio_source_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognitionAudio::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dictation_5fasr_2eproto_getter, &descriptor_table_dictation_5fasr_2eproto_once,
      file_level_metadata_dictation_5fasr_2eproto[6]);
}

// ===================================================================

class RecognizeResponse::_Internal {
 public:
};

RecognizeResponse::RecognizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognizeResponse)
}
RecognizeResponse::RecognizeResponse(const RecognizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognizeResponse)
}

void RecognizeResponse::SharedCtor() {
}

RecognizeResponse::~RecognizeResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognizeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecognizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RecognizeResponse::ArenaDtor(void* object) {
  RecognizeResponse* _this = reinterpret_cast< RecognizeResponse* >(object);
  (void)_this;
}
void RecognizeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecognizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecognizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecognizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecognizeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognizeResponse)
  return target;
}

size_t RecognizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognizeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognizeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.RecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecognizeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.RecognizeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.RecognizeResponse)
    MergeFrom(*source);
  }
}

void RecognizeResponse::MergeFrom(const RecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void RecognizeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.RecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeResponse::CopyFrom(const RecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeResponse::IsInitialized() const {
  return true;
}

void RecognizeResponse::InternalSwap(RecognizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognizeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dictation_5fasr_2eproto_getter, &descriptor_table_dictation_5fasr_2eproto_once,
      file_level_metadata_dictation_5fasr_2eproto[7]);
}

// ===================================================================

class StreamingRecognizeResponse::_Internal {
 public:
  static const ::google::rpc::Status& error(const StreamingRecognizeResponse* msg);
};

const ::google::rpc::Status&
StreamingRecognizeResponse::_Internal::error(const StreamingRecognizeResponse* msg) {
  return *msg->error_;
}
void StreamingRecognizeResponse::clear_error() {
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
StreamingRecognizeResponse::StreamingRecognizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.StreamingRecognizeResponse)
}
StreamingRecognizeResponse::StreamingRecognizeResponse(const StreamingRecognizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    error_ = new ::google::rpc::Status(*from.error_);
  } else {
    error_ = nullptr;
  }
  speech_event_type_ = from.speech_event_type_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.StreamingRecognizeResponse)
}

void StreamingRecognizeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&error_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&speech_event_type_) -
    reinterpret_cast<char*>(&error_)) + sizeof(speech_event_type_));
}

StreamingRecognizeResponse::~StreamingRecognizeResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.StreamingRecognizeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamingRecognizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete error_;
}

void StreamingRecognizeResponse::ArenaDtor(void* object) {
  StreamingRecognizeResponse* _this = reinterpret_cast< StreamingRecognizeResponse* >(object);
  (void)_this;
}
void StreamingRecognizeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingRecognizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamingRecognizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  speech_event_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingRecognizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.rpc.Status error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_speech_event_type(static_cast<::google::cloud::speech::v1::StreamingRecognizeResponse_SpeechEventType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingRecognizeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::error(this), target, stream);
  }

  // repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  // .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
  if (this->speech_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_speech_event_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.StreamingRecognizeResponse)
  return target;
}

size_t StreamingRecognizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.StreamingRecognitionResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // .google.cloud.speech.v1.StreamingRecognizeResponse.SpeechEventType speech_event_type = 4;
  if (this->speech_event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_speech_event_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingRecognizeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingRecognizeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingRecognizeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.StreamingRecognizeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.StreamingRecognizeResponse)
    MergeFrom(*source);
  }
}

void StreamingRecognizeResponse::MergeFrom(const StreamingRecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_error()) {
    _internal_mutable_error()->::google::rpc::Status::MergeFrom(from._internal_error());
  }
  if (from.speech_event_type() != 0) {
    _internal_set_speech_event_type(from._internal_speech_event_type());
  }
}

void StreamingRecognizeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingRecognizeResponse::CopyFrom(const StreamingRecognizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.StreamingRecognizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognizeResponse::IsInitialized() const {
  return true;
}

void StreamingRecognizeResponse::InternalSwap(StreamingRecognizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamingRecognizeResponse, speech_event_type_)
      + sizeof(StreamingRecognizeResponse::speech_event_type_)
      - PROTOBUF_FIELD_OFFSET(StreamingRecognizeResponse, error_)>(
          reinterpret_cast<char*>(&error_),
          reinterpret_cast<char*>(&other->error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingRecognizeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dictation_5fasr_2eproto_getter, &descriptor_table_dictation_5fasr_2eproto_once,
      file_level_metadata_dictation_5fasr_2eproto[8]);
}

// ===================================================================

class StreamingRecognitionResult::_Internal {
 public:
};

StreamingRecognitionResult::StreamingRecognitionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  alternatives_(arena),
  lattice_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.StreamingRecognitionResult)
}
StreamingRecognitionResult::StreamingRecognitionResult(const StreamingRecognitionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      alternatives_(from.alternatives_),
      lattice_(from.lattice_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_final_, &from.is_final_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_finalization_cause_) -
    reinterpret_cast<char*>(&is_final_)) + sizeof(result_finalization_cause_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.StreamingRecognitionResult)
}

void StreamingRecognitionResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_final_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_finalization_cause_) -
    reinterpret_cast<char*>(&is_final_)) + sizeof(result_finalization_cause_));
}

StreamingRecognitionResult::~StreamingRecognitionResult() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.StreamingRecognitionResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamingRecognitionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StreamingRecognitionResult::ArenaDtor(void* object) {
  StreamingRecognitionResult* _this = reinterpret_cast< StreamingRecognitionResult* >(object);
  (void)_this;
}
void StreamingRecognitionResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingRecognitionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamingRecognitionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.StreamingRecognitionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternatives_.Clear();
  lattice_.Clear();
  ::memset(&is_final_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_finalization_cause_) -
      reinterpret_cast<char*>(&is_final_)) + sizeof(result_finalization_cause_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingRecognitionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alternatives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_final = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float stability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          stability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .google.cloud.speech.v1.StreamingRecognitionResult.ResultFinalizationCause result_finalization_cause = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result_finalization_cause(static_cast<::google::cloud::speech::v1::StreamingRecognitionResult_ResultFinalizationCause>(val));
        } else goto handle_unusual;
        continue;
      // repeated .google.cloud.speech.v1.RecognitionLattice lattice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lattice(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingRecognitionResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.StreamingRecognitionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alternatives_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_alternatives(i), target, stream);
  }

  // bool is_final = 2;
  if (this->is_final() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_final(), target);
  }

  // float stability = 3;
  if (!(this->stability() <= 0 && this->stability() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_stability(), target);
  }

  // .google.cloud.speech.v1.StreamingRecognitionResult.ResultFinalizationCause result_finalization_cause = 4;
  if (this->result_finalization_cause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_result_finalization_cause(), target);
  }

  // repeated .google.cloud.speech.v1.RecognitionLattice lattice = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lattice_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_lattice(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.StreamingRecognitionResult)
  return target;
}

size_t StreamingRecognitionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.StreamingRecognitionResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  total_size += 1UL * this->_internal_alternatives_size();
  for (const auto& msg : this->alternatives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.cloud.speech.v1.RecognitionLattice lattice = 5;
  total_size += 1UL * this->_internal_lattice_size();
  for (const auto& msg : this->lattice_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool is_final = 2;
  if (this->is_final() != 0) {
    total_size += 1 + 1;
  }

  // float stability = 3;
  if (!(this->stability() <= 0 && this->stability() >= 0)) {
    total_size += 1 + 4;
  }

  // .google.cloud.speech.v1.StreamingRecognitionResult.ResultFinalizationCause result_finalization_cause = 4;
  if (this->result_finalization_cause() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result_finalization_cause());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingRecognitionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.StreamingRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingRecognitionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingRecognitionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.StreamingRecognitionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.StreamingRecognitionResult)
    MergeFrom(*source);
  }
}

void StreamingRecognitionResult::MergeFrom(const StreamingRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.StreamingRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alternatives_.MergeFrom(from.alternatives_);
  lattice_.MergeFrom(from.lattice_);
  if (from.is_final() != 0) {
    _internal_set_is_final(from._internal_is_final());
  }
  if (!(from.stability() <= 0 && from.stability() >= 0)) {
    _internal_set_stability(from._internal_stability());
  }
  if (from.result_finalization_cause() != 0) {
    _internal_set_result_finalization_cause(from._internal_result_finalization_cause());
  }
}

void StreamingRecognitionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.StreamingRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingRecognitionResult::CopyFrom(const StreamingRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.StreamingRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingRecognitionResult::IsInitialized() const {
  return true;
}

void StreamingRecognitionResult::InternalSwap(StreamingRecognitionResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  alternatives_.InternalSwap(&other->alternatives_);
  lattice_.InternalSwap(&other->lattice_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamingRecognitionResult, result_finalization_cause_)
      + sizeof(StreamingRecognitionResult::result_finalization_cause_)
      - PROTOBUF_FIELD_OFFSET(StreamingRecognitionResult, is_final_)>(
          reinterpret_cast<char*>(&is_final_),
          reinterpret_cast<char*>(&other->is_final_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingRecognitionResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dictation_5fasr_2eproto_getter, &descriptor_table_dictation_5fasr_2eproto_once,
      file_level_metadata_dictation_5fasr_2eproto[9]);
}

// ===================================================================

class SpeechRecognitionResult::_Internal {
 public:
};

SpeechRecognitionResult::SpeechRecognitionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  alternatives_(arena),
  lattice_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.SpeechRecognitionResult)
}
SpeechRecognitionResult::SpeechRecognitionResult(const SpeechRecognitionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      alternatives_(from.alternatives_),
      lattice_(from.lattice_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.SpeechRecognitionResult)
}

void SpeechRecognitionResult::SharedCtor() {
}

SpeechRecognitionResult::~SpeechRecognitionResult() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.SpeechRecognitionResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeechRecognitionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpeechRecognitionResult::ArenaDtor(void* object) {
  SpeechRecognitionResult* _this = reinterpret_cast< SpeechRecognitionResult* >(object);
  (void)_this;
}
void SpeechRecognitionResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeechRecognitionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeechRecognitionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.SpeechRecognitionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternatives_.Clear();
  lattice_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeechRecognitionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alternatives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.cloud.speech.v1.RecognitionLattice lattice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lattice(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeechRecognitionResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.SpeechRecognitionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alternatives_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_alternatives(i), target, stream);
  }

  // repeated .google.cloud.speech.v1.RecognitionLattice lattice = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lattice_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_lattice(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.SpeechRecognitionResult)
  return target;
}

size_t SpeechRecognitionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.SpeechRecognitionResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.SpeechRecognitionAlternative alternatives = 1;
  total_size += 1UL * this->_internal_alternatives_size();
  for (const auto& msg : this->alternatives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.cloud.speech.v1.RecognitionLattice lattice = 5;
  total_size += 1UL * this->_internal_lattice_size();
  for (const auto& msg : this->lattice_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechRecognitionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.SpeechRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechRecognitionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeechRecognitionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.SpeechRecognitionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.SpeechRecognitionResult)
    MergeFrom(*source);
  }
}

void SpeechRecognitionResult::MergeFrom(const SpeechRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.SpeechRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alternatives_.MergeFrom(from.alternatives_);
  lattice_.MergeFrom(from.lattice_);
}

void SpeechRecognitionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.SpeechRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechRecognitionResult::CopyFrom(const SpeechRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.SpeechRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionResult::IsInitialized() const {
  return true;
}

void SpeechRecognitionResult::InternalSwap(SpeechRecognitionResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  alternatives_.InternalSwap(&other->alternatives_);
  lattice_.InternalSwap(&other->lattice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeechRecognitionResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dictation_5fasr_2eproto_getter, &descriptor_table_dictation_5fasr_2eproto_once,
      file_level_metadata_dictation_5fasr_2eproto[10]);
}

// ===================================================================

class SpeechRecognitionAlternative::_Internal {
 public:
};

SpeechRecognitionAlternative::SpeechRecognitionAlternative(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  words_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.SpeechRecognitionAlternative)
}
SpeechRecognitionAlternative::SpeechRecognitionAlternative(const SpeechRecognitionAlternative& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      words_(from.words_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transcript().empty()) {
    transcript_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transcript(), 
      GetArena());
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.SpeechRecognitionAlternative)
}

void SpeechRecognitionAlternative::SharedCtor() {
transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
confidence_ = 0;
}

SpeechRecognitionAlternative::~SpeechRecognitionAlternative() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.SpeechRecognitionAlternative)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpeechRecognitionAlternative::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  transcript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpeechRecognitionAlternative::ArenaDtor(void* object) {
  SpeechRecognitionAlternative* _this = reinterpret_cast< SpeechRecognitionAlternative* >(object);
  (void)_this;
}
void SpeechRecognitionAlternative::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeechRecognitionAlternative::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeechRecognitionAlternative::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  transcript_.ClearToEmpty();
  confidence_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeechRecognitionAlternative::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string transcript = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transcript();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.SpeechRecognitionAlternative.transcript"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .google.cloud.speech.v1.WordInfo words = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_words(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeechRecognitionAlternative::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transcript().data(), static_cast<int>(this->_internal_transcript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.SpeechRecognitionAlternative.transcript");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transcript(), target);
  }

  // float confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_confidence(), target);
  }

  // repeated .google.cloud.speech.v1.WordInfo words = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_words_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_words(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.SpeechRecognitionAlternative)
  return target;
}

size_t SpeechRecognitionAlternative::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.speech.v1.WordInfo words = 3;
  total_size += 1UL * this->_internal_words_size();
  for (const auto& msg : this->words_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transcript());
  }

  // float confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechRecognitionAlternative::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeechRecognitionAlternative* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeechRecognitionAlternative>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.SpeechRecognitionAlternative)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.SpeechRecognitionAlternative)
    MergeFrom(*source);
  }
}

void SpeechRecognitionAlternative::MergeFrom(const SpeechRecognitionAlternative& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
  if (from.transcript().size() > 0) {
    _internal_set_transcript(from._internal_transcript());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
}

void SpeechRecognitionAlternative::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechRecognitionAlternative::CopyFrom(const SpeechRecognitionAlternative& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.SpeechRecognitionAlternative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionAlternative::IsInitialized() const {
  return true;
}

void SpeechRecognitionAlternative::InternalSwap(SpeechRecognitionAlternative* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  words_.InternalSwap(&other->words_);
  transcript_.Swap(&other->transcript_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeechRecognitionAlternative::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dictation_5fasr_2eproto_getter, &descriptor_table_dictation_5fasr_2eproto_once,
      file_level_metadata_dictation_5fasr_2eproto[11]);
}

// ===================================================================

class WordInfo::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& start_time(const WordInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& end_time(const WordInfo* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
WordInfo::_Internal::start_time(const WordInfo* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
WordInfo::_Internal::end_time(const WordInfo* msg) {
  return *msg->end_time_;
}
void WordInfo::clear_start_time() {
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void WordInfo::clear_end_time() {
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
WordInfo::WordInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.WordInfo)
}
WordInfo::WordInfo(const WordInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_word().empty()) {
    word_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_word(), 
      GetArena());
  }
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.WordInfo)
}

void WordInfo::SharedCtor() {
word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

WordInfo::~WordInfo() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.WordInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WordInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  word_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void WordInfo::ArenaDtor(void* object) {
  WordInfo* _this = reinterpret_cast< WordInfo* >(object);
  (void)_this;
}
void WordInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WordInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WordInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.WordInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_.ClearToEmpty();
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WordInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string word = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_word();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.WordInfo.word"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WordInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.WordInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_time = 1;
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Duration end_time = 2;
  if (this->has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end_time(this), target, stream);
  }

  // string word = 3;
  if (this->word().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_word().data(), static_cast<int>(this->_internal_word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.WordInfo.word");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_word(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.WordInfo)
  return target;
}

size_t WordInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.WordInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string word = 3;
  if (this->word().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_word());
  }

  // .google.protobuf.Duration start_time = 1;
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Duration end_time = 2;
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WordInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.WordInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WordInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WordInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.WordInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.WordInfo)
    MergeFrom(*source);
  }
}

void WordInfo::MergeFrom(const WordInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.WordInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.word().size() > 0) {
    _internal_set_word(from._internal_word());
  }
  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_start_time());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_end_time());
  }
}

void WordInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.WordInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WordInfo::CopyFrom(const WordInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.WordInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WordInfo::IsInitialized() const {
  return true;
}

void WordInfo::InternalSwap(WordInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  word_.Swap(&other->word_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WordInfo, end_time_)
      + sizeof(WordInfo::end_time_)
      - PROTOBUF_FIELD_OFFSET(WordInfo, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WordInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dictation_5fasr_2eproto_getter, &descriptor_table_dictation_5fasr_2eproto_once,
      file_level_metadata_dictation_5fasr_2eproto[12]);
}

// ===================================================================

class RecognitionLattice::_Internal {
 public:
};

RecognitionLattice::RecognitionLattice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  final_nodes_(arena),
  edges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.RecognitionLattice)
}
RecognitionLattice::RecognitionLattice(const RecognitionLattice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      final_nodes_(from.final_nodes_),
      edges_(from.edges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.RecognitionLattice)
}

void RecognitionLattice::SharedCtor() {
}

RecognitionLattice::~RecognitionLattice() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.RecognitionLattice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecognitionLattice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RecognitionLattice::ArenaDtor(void* object) {
  RecognitionLattice* _this = reinterpret_cast< RecognitionLattice* >(object);
  (void)_this;
}
void RecognitionLattice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecognitionLattice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecognitionLattice::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.RecognitionLattice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  final_nodes_.Clear();
  edges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecognitionLattice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 final_nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_final_nodes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_final_nodes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.cloud.speech.v1.LatticeEdge edges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecognitionLattice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.RecognitionLattice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 final_nodes = 1;
  {
    int byte_size = _final_nodes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_final_nodes(), byte_size, target);
    }
  }

  // repeated .google.cloud.speech.v1.LatticeEdge edges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_edges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.RecognitionLattice)
  return target;
}

size_t RecognitionLattice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.RecognitionLattice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 final_nodes = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->final_nodes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _final_nodes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .google.cloud.speech.v1.LatticeEdge edges = 2;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognitionLattice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.RecognitionLattice)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognitionLattice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecognitionLattice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.RecognitionLattice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.RecognitionLattice)
    MergeFrom(*source);
  }
}

void RecognitionLattice::MergeFrom(const RecognitionLattice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.RecognitionLattice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  final_nodes_.MergeFrom(from.final_nodes_);
  edges_.MergeFrom(from.edges_);
}

void RecognitionLattice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.RecognitionLattice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognitionLattice::CopyFrom(const RecognitionLattice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.RecognitionLattice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognitionLattice::IsInitialized() const {
  return true;
}

void RecognitionLattice::InternalSwap(RecognitionLattice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  final_nodes_.InternalSwap(&other->final_nodes_);
  edges_.InternalSwap(&other->edges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognitionLattice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dictation_5fasr_2eproto_getter, &descriptor_table_dictation_5fasr_2eproto_once,
      file_level_metadata_dictation_5fasr_2eproto[13]);
}

// ===================================================================

class LatticeEdge::_Internal {
 public:
};

LatticeEdge::LatticeEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.cloud.speech.v1.LatticeEdge)
}
LatticeEdge::LatticeEdge(const LatticeEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArena());
  }
  ::memcpy(&start_node_, &from.start_node_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&start_node_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.speech.v1.LatticeEdge)
}

void LatticeEdge::SharedCtor() {
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_node_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&start_node_)) + sizeof(duration_));
}

LatticeEdge::~LatticeEdge() {
  // @@protoc_insertion_point(destructor:google.cloud.speech.v1.LatticeEdge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LatticeEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LatticeEdge::ArenaDtor(void* object) {
  LatticeEdge* _this = reinterpret_cast< LatticeEdge* >(object);
  (void)_this;
}
void LatticeEdge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LatticeEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LatticeEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.speech.v1.LatticeEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty();
  ::memset(&start_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&start_node_)) + sizeof(duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatticeEdge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 start_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.speech.v1.LatticeEdge.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float language_cost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          language_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acoustic_cost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          acoustic_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LatticeEdge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.speech.v1.LatticeEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start_node = 1;
  if (this->start_node() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_start_node(), target);
  }

  // int32 end_node = 2;
  if (this->end_node() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_end_node(), target);
  }

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.speech.v1.LatticeEdge.symbol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_symbol(), target);
  }

  // float language_cost = 4;
  if (!(this->language_cost() <= 0 && this->language_cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_language_cost(), target);
  }

  // float acoustic_cost = 5;
  if (!(this->acoustic_cost() <= 0 && this->acoustic_cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_acoustic_cost(), target);
  }

  // int32 duration = 6;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.speech.v1.LatticeEdge)
  return target;
}

size_t LatticeEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.speech.v1.LatticeEdge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // int32 start_node = 1;
  if (this->start_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_node());
  }

  // int32 end_node = 2;
  if (this->end_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_node());
  }

  // float language_cost = 4;
  if (!(this->language_cost() <= 0 && this->language_cost() >= 0)) {
    total_size += 1 + 4;
  }

  // float acoustic_cost = 5;
  if (!(this->acoustic_cost() <= 0 && this->acoustic_cost() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 duration = 6;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatticeEdge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.cloud.speech.v1.LatticeEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const LatticeEdge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatticeEdge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.cloud.speech.v1.LatticeEdge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.cloud.speech.v1.LatticeEdge)
    MergeFrom(*source);
  }
}

void LatticeEdge::MergeFrom(const LatticeEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.speech.v1.LatticeEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.start_node() != 0) {
    _internal_set_start_node(from._internal_start_node());
  }
  if (from.end_node() != 0) {
    _internal_set_end_node(from._internal_end_node());
  }
  if (!(from.language_cost() <= 0 && from.language_cost() >= 0)) {
    _internal_set_language_cost(from._internal_language_cost());
  }
  if (!(from.acoustic_cost() <= 0 && from.acoustic_cost() >= 0)) {
    _internal_set_acoustic_cost(from._internal_acoustic_cost());
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
}

void LatticeEdge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.cloud.speech.v1.LatticeEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatticeEdge::CopyFrom(const LatticeEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.speech.v1.LatticeEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatticeEdge::IsInitialized() const {
  return true;
}

void LatticeEdge::InternalSwap(LatticeEdge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatticeEdge, duration_)
      + sizeof(LatticeEdge::duration_)
      - PROTOBUF_FIELD_OFFSET(LatticeEdge, start_node_)>(
          reinterpret_cast<char*>(&start_node_),
          reinterpret_cast<char*>(&other->start_node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatticeEdge::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dictation_5fasr_2eproto_getter, &descriptor_table_dictation_5fasr_2eproto_once,
      file_level_metadata_dictation_5fasr_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace speech
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::RecognizeRequest* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::RecognizeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::RecognizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::StreamingRecognizeRequest* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::StreamingRecognizeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::StreamingRecognizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::StreamingRecognitionConfig* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::StreamingRecognitionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::StreamingRecognitionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::RecognitionConfig* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::RecognitionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::RecognitionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::SpeechContext* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::SpeechContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::SpeechContext >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::ConfigField* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::ConfigField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::ConfigField >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::RecognitionAudio* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::RecognitionAudio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::RecognitionAudio >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::RecognizeResponse* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::RecognizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::RecognizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::StreamingRecognizeResponse* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::StreamingRecognizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::StreamingRecognizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::StreamingRecognitionResult* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::StreamingRecognitionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::StreamingRecognitionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::SpeechRecognitionResult* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::SpeechRecognitionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::SpeechRecognitionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::SpeechRecognitionAlternative* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::SpeechRecognitionAlternative >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::SpeechRecognitionAlternative >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::WordInfo* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::WordInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::WordInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::RecognitionLattice* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::RecognitionLattice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::RecognitionLattice >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::speech::v1::LatticeEdge* Arena::CreateMaybeMessage< ::google::cloud::speech::v1::LatticeEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::speech::v1::LatticeEdge >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
